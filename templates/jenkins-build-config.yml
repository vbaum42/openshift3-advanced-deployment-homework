apiVersion: v1items:- kind: "BuildConfig"  apiVersion: "v1"  metadata:    name: "cicd-bc"  spec:    strategy:      type: "JenkinsPipeline"      jenkinsPipelineStrategy:        jenkinsfile: |-          pipeline {              agent {                label 'maven'              }                          stages {                stage('Checkout Source') {                  steps {                    git branch: 'eap-7', url: 'https://github.com/vbaum42/openshift-tasks.git'                  }                }                stage('Build App') {                  steps {                    sh "mvn clean install -DskipTests"                  }                }                stage('Test App') {                  steps {                    sh "mvn test"                  }                }                stage('Create Image Builder') {                  when {                    expression {                      openshift.withCluster() {                        openshift.withProject("cicd") {                          return !openshift.selector("bc", "tasks-bc").exists();                        }                      }                    }                  }                  steps {                    script {                      openshift.withCluster() {                        openshift.withProject("cicd") {                          openshift.newBuild("--name=tasks-bc", "--image-stream=jboss-eap70-openshift:1.5", "--binary")                        }                      }                    }                  }                }                stage('Build Image') {                  steps {                    sh "rm -rf oc-build && mkdir -p oc-build/deployments && mkdir -p oc-build/configuration"                    sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"                    sh "cp configuration/*.properties oc-build/configuration"                    script {                      openshift.withCluster() {                        openshift.withProject("cicd") {                          openshift.selector("bc", "tasks-bc").startBuild("--from-file=oc-build", "--wait")                        }                      }                    }                  }                }                                                    stage('Promote to DEV') {                  steps {                    openshiftTag (srcStream: 'tasks-bc', srcTag: 'latest',  namespace: "cicd", destinationNamespace: "tasks-dev", destStream: 'tasks-bc', destTag: 'dev')                  }                }                stage('Create DEV') {                  when {                    expression {                      openshift.withCluster() {                        openshift.withProject("tasks-dev") {                          return !openshift.selector('dc', 'tasks-dev').exists()                        }                      }                    }                  }                  steps {                    script {                      openshift.withCluster() {                        openshift.withProject("tasks-dev") {                          openshift.newApp("tasks-bc:dev", "--name=tasks-dev").narrow('svc').expose()                          openshift.set("probe dc/tasks-dev --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                          openshift.set("probe dc/tasks-dev --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                        }                      }                    }                  }                }                                                                                                    stage('Promote to TEST') {                  steps {                    openshiftTag (srcStream: 'tasks-bc', srcTag: 'latest',  namespace: "cicd", destinationNamespace: "tasks-test", destStream: 'tasks-bc', destTag: 'test')                  }                }                stage('Create TEST') {                  when {                    expression {                      openshift.withCluster() {                        openshift.withProject("tasks-test") {                          return !openshift.selector('dc', 'tasks-test').exists()                        }                      }                    }                  }                  steps {                    script {                      openshift.withCluster() {                        openshift.withProject("tasks-test") {                          openshift.newApp("tasks-bc:test", "--name=tasks-test").narrow('svc').expose()                          openshift.set("probe dc/tasks-test --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                          openshift.set("probe dc/tasks-test --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                        }                      }                    }                  }                }                                                                                        stage('Promote PROD') {                  steps {                    openshiftTag (srcStream: 'tasks-bc', srcTag: 'latest',  namespace: "cicd", destinationNamespace: "tasks-prod", destStream: 'tasks-bc', destTag: 'prod')                  }                }                stage('Create PROD') {                  when {                    expression {                      openshift.withCluster() {                        openshift.withProject("tasks-prod") {                          return !openshift.selector('dc', 'tasks-prod').exists()                        }                      }                    }                  }                  steps {                    script {                      openshift.withCluster() {                        openshift.withProject("tasks-prod") {                          openshift.newApp("tasks-bc:prod", "--name=tasks-prod").narrow('svc').expose()                          openshift.set("probe dc/tasks-prod --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                          openshift.set("probe dc/tasks-prod --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")                          openshift.set("resources dc tasks-prod --limits=cpu=300m,memory=512Mi --requests=cpu=100m,memory=256Mi")                          openshift.selector("dc", "tasks-prod").autoscale("--min 1 --max 10 --cpu-percent=80 --name='tasks-hpa'")                        }                      }                    }                  }                }              }            }- kind: ConfigMap  apiVersion: "v1"  metadata:    labels:      app: cicd      role: jenkins-slave    name: jenkins-slaves  data:    maven-template: |-      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>        <inheritFrom></inheritFrom>        <name>maven</name>        <privileged>false</privileged>        <alwaysPullImage>false</alwaysPullImage>        <instanceCap>2147483647</instanceCap>        <idleMinutes>0</idleMinutes>        <label>maven</label>        <serviceAccount>jenkins</serviceAccount>        <nodeSelector></nodeSelector>        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">          <memory>false</memory>        </workspaceVolume>        <volumes />        <containers>          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>            <name>jnlp</name>            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>            <privileged>false</privileged>            <alwaysPullImage>false</alwaysPullImage>            <workingDir>/tmp</workingDir>            <command></command>            <args>${computer.jnlpmac} ${computer.name}</args>            <ttyEnabled>false</ttyEnabled>            <resourceRequestCpu>200m</resourceRequestCpu>            <resourceRequestMemory>512Mi</resourceRequestMemory>            <resourceLimitCpu>2</resourceLimitCpu>            <resourceLimitMemory>4Gi</resourceLimitMemory>            <envVars/>          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>        </containers>        <envVars/>        <annotations/>        <imagePullSecrets/>      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>kind: Listmetadata: {}